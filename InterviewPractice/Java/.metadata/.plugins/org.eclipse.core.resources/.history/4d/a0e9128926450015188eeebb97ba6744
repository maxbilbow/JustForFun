package Interviews.acano;

import java.util.Iterator;
import java.util.LinkedList;

/**
 * . Write code in a language of your choice to find the longest 
 *   monotonically increasing contiguous subsequence in a sequence
 *   of integers and reverse it. (750 character max)
 * @author Max
 *
 */
public class Solution {
	
	LinkedList<Integer> list, sub;
	private int listSize, maxLength, smallest;
	
	public int[] get(int[] sequence) {
		list = new LinkedList<Integer>();
		listSize = sequence.length;
		maxLength = 0;
		for (int i : sequence) 
			list.addLast(i);
		sequence = new int[length(0)];
		Iterator<Integer> rev = sub.descendingIterator();
		int i = 0;
		while (rev.hasNext())
			sequence[i++] = rev.next();
		return sequence;
	}
	
	
	private int lenght(int[]P) {
//		Iterator<Integer> i = list.iterator();
//		int first = i.next();
//		sub = new LinkedList<Integer>();
//		sub.addFirst(first);
//		
//		//if i find a number that is less than
//		return 0;
		
		int N = P.length;
		int[] M = new int[N + 1];
		int L = 0;
		for (int i = 0;i<N;++i ) {
			// Binary search for the largest positive j ≤ L
			// such that X[M[j]] < X[i]
			int lo = 1;
			int hi = L;
			while ( lo <= hi) {
				int mid = (int) Math.ceil((lo+hi)/2);
				if (M[mid] < i)
					lo = mid+1;
				else
					hi = mid-1;
			}
				   // After searching, lo is 1 greater than the
				   // length of the longest prefix of X[i]
				   int newL = lo;

				   // The predecessor of X[i] is the last index of 
				   // the subsequence of length newL-1
				   P[i] = M[newL-1];
				   M[newL] = i;

				   if (newL > L)
				     // If we found a subsequence longer than any we've
				     // found yet, update L
				     L = newL;

				 // Reconstruct the longest increasing subsequence
				 int[] S = new int[L];
				 int k = M[L];
				 for (int i=0; i<L;++i) {
				   S[i] = X[k];
				   k = P[k];
				 }
		}
				 return S
	}
	
	private int length(int start) {
		if (listSize - start < maxLength)
			return maxLength;
		
		Iterator<Integer> i = this.list.listIterator(start);
		int first = i.next();
		
		if (start == 0 || first <= smallest) //is the first element smaller?
			smallest = first;
			System.out.print("Smallest: " + smallest + " ");
			LinkedList<Integer> sub = new LinkedList<Integer>();
			sub.addLast(first);
			while (i.hasNext()) {
				int next = i.next();
				if (next > sub.getLast())
					sub.addLast(next);
			}
			print(sub);
			int size = sub.size();
			if (size >= maxLength) {
				maxLength = size;
				this.sub = sub;
			}
//		}
		return length(++start);
	}
	
	public static void main(String[]args) {
		int[] a = {3, 8,2,3, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15};
		
		int[] b = {
				4, 8,2,3, 4, 12, 2, 10, 6, 14, 1,
				2, 10, 6, 14, 1,9, 5, 13, 3, 11, 7, 15,
				8,2,3, 4, 12, 2, 10, 6, 14,
				8,2,3, 4, 6, 14, 1,9, 5, 13, 
				3, 11, 7, 15, 8,2,3, 4, 12, 2, 
				10, 12, 2, 10, 6, 14, 11, 7, 15, 8,2,3, 4, 12, 2, 
				10, 12, 2, 10, 6, 14,3, 8,2,3, 4, 12, 2, 10, 6, 14, 1,
				2, 10, 6, 14, 1,9, 5, 13, 3, 11, 7, 15,
				8,2,3, 4, 12, 2, 10, 6, 14,
				8,2,3, 4, 6, 14, 1,9, 5, 13, 
				3, 11, 7, 15, 1,2,3,4,5,6,7,8
				};
		
		
		int[] c = {
				4, 8,2,3, 4, 12, 2, 10, 6, 14, 1,
				2, 10, 6, 14, 1,9, 5, 13, 3, 11, 7, 15,
				8,2,3, 4, 12, 2, 10, 6, 14,
				8,2,3, 4, 6, 14, 1,9, 5, 13, 
				3, 11, 7, 15, 8,2,3, 4, 12, 2, 
				10, 12, 2, 10, 0, 14, 11, 7, 15, 8,2,3, 4, 12, 2, 
				10, 12, 2, 10, 6, 14,3, 8,2,3, 4, 12, 2, 10, 6, 14, 1,
				2, 10, 6, 14, 1,9, 5, 13, 3, 11, 7, 15,
				8,2,3, 4, 12, 2, 10, 6, 14,
				8,2,3, 4, 6, 14, 1,9, 5, 13, 
				3, 11, 7, 15, 1,2,3,4,5,6,7,8
				};
		Solution s = new Solution();
		System.out.print("Solution A: \n");
		print(s.get(c));
//		System.out.println();
//		System.out.print("Solution B: ");
//		print(s.get(b));
//		System.out.println();
//		System.out.print("Solution C: ");
//		print(s.get(c));
		
	}
	
	static <T> void print(LinkedList<T> o) {
		Iterator<T> i = o.iterator();
		print(i);
	}
	
	static <T>void print(Iterator<T> i) {
		System.out.print("[ " + i.next());
		while (i.hasNext())
			System.out.print(", " + i.next());
		System.out.print(" ]\n");
	}
	
	static void print(int[] o) {
		System.out.print("[ " + o[0]);
		for (int i = 1;i<o.length;++i)
			System.out.print(", " + o[i]);
		System.out.print(" ]\n");
	}
	
}
