package Interviews.acano;
import static Interviews.acano.S.*;


public class Solution {
	
	private int CeilIndex(int in[], int l, int r, int key) {
		int m;
		while( r - l > 1 ) {
			m = l + (r - l)/2;
			if (in[m] >= key)
				r = m;
			else
				l = m;
		}
		return r;
	}

	public int[] solve(int[] in, boolean reversed) {
		int max = in.length;
		int []aOut  = new int[max];
		int len; //length of longest sequence

		aOut[0] = in[0];
		len = 1;
		for( int i = 1; i < max; i++ ) {
			if( in[i] < aOut[0] )
				// new smallest value
				aOut[0] = in[i];
			else if( in[i] > aOut[len-1] )
				// extend largest subsequence
				aOut[len++] = in[i];
			else
				aOut[CeilIndex(aOut, -1, len-1, in[i])] = in[i];
		}

		int[] result = new int[len];
		for (int i=0;i<result.length;++i) {
			result[i] = aOut[reversed ? --len : i];
		}
		return result;
	}

	public static void main(String[]args) {
		int A[] = { 2, 5, 3, 7, 11, 8, 10, 13, 6 };




		int[] a = {3, 8,2,3, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15};

		int[] b = {
				4, 8,2,3, 4, 12, 2, 10, 6, 14, 1,
				2, 10, 6, 14, 1,9, 5, 13, 3, 11, 7, 15,
				8,2,3, 4, 12, 2, 10, 6, 14,
				8,2,3, 4, 6, 14, 1,9, 5, 13, 
				3, 11, 7, 15, 8,2,3, 4, 12, 2, 
				10, 12, 2, 10, 6, 14, 11, 7, 15, 8,2,3, 4, 12, 2, 
				10, 12, 2, 10, 6, 14,3, 8,2,3, 4, 12, 2, 10, 6, 14, 1,
				2, 10, 6, 14, 1,9, 5, 13, 3, 11, 7, 15,
				8,2,3, 4, 12, 2, 10, 6, 14,
				8,2,3, 4, 6, 14, 1,9, 5, 13, 
				3, 11, 7, 15, 1,2,3,4,5,6,7,8
		};


		int[] c = {
				4, 8,2,3, 4, 12, 2, 10, 6, 14, 1,
				2, 10, 6, 14, 1,9, 5, 13, 3, 11, 7, 15,
				8,2,3, 4, 12, 2, 10, 6, 14,
				8,2,3, 4, 6, 14, 1,9, 5, 13, 
				3, 11, 7, 15, 8,2,3, 4, 12, 2, 
				10, 12, 2, 10, 0, 14, 11, 7, 15, 8,2,3, 4, 12, 2, 
				10, 12, 2, 10, 6, 14,3, 8,2,3, 4, 12, 2, 10, 6, 14, 1,
				2, 10, 6, 14, 1,9, 5, 13, 3, 11, 7, 15,
				8,2,3, 4, 12, 2, 10, 6, 14,
				8,2,3, 4, 6, 14, 1,9, 5, 13, 
				3, 11, 7, 15,2,3,4,5,6,7,8
		};
		Solution s = new Solution();
		System.out.println("A: "+
				ToString(s.solve(A ,false)) +"\n");

		System.out.println("a: "+
				ToString(s.solve(a, true)) +"\n");

		System.out.println("B: "+
				ToString(s.solve(b, true)) +"\n");

		System.out.println("C: "+
				ToString(s.solve(c, false)) +"\n");
		//		System.out.print("Solution A: \n");
		//		print(s.get(a));
		//		System.out.println();
		//		System.out.print("Solution B: ");
		//		print(s.get(b));
		//		System.out.println();
		//		System.out.print("Solution C: ");
		//		print(s.get(c));
	}
}
