package Interviews.imdb;

import java.util.Iterator;
import java.util.LinkedList;

/**
 * . Write code in a language of your choice to find the longest 
 *   monotonically increasing contiguous subsequence in a sequence
 *   of integers and reverse it. (750 character max)
 * @author Max
 *
 */
public class Solution {
	
	LinkedList<Integer> list, sub;
	final int listSize;
	int maxLength = 0;  int smallest = -1;
	
	public Solution(int[] sequence) {
		list = new LinkedList<Integer>();
		listSize = sequence.length;
		for (int i : sequence) 
			list.addLast(i);
		System.out.println("\narrLen: "+sequence.length + ", list: " + list.size());//+ ", mapLen: " + llist.size() + "\n");
	}
	
	
	public int[] get() {
		int[] sequence = new int[length()];
		Iterator<Integer> rev = sub.descendingIterator();
		int i = 0;
		while (rev.hasNext())
			sequence[i++] = rev.next();
		return sequence;
	}
	
	int length() {
		return getSubs(0);
	}
	
	private int getSubs(int start) {
		Iterator<Integer> i = this.list.listIterator(start);
		int first = i.next();
		if (smallest == -1 || first < smallest) //is the first element smaller?
			smallest = first;
		else if (listSize - start > maxLength)
			return getSubs(++start);	
		else
			return maxLength;
		LinkedList<Integer> sub = new LinkedList<Integer>();
		sub.addLast(first);
		while (i.hasNext()) {
			int next = i.next();
			if (next > sub.getLast())
				sub.add(next);
		}
		print(sub);
		int size = sub.size();
		if (size > maxLength) {
			maxLength = size;
			this.sub = sub;
		}
		return getSubs(++start);
//		if (listSize - start > maxLength) //Can we still find a longer sequence
//			return getSubs(++start);	
//		else
//			return  maxLength;
	}
	
	public static void main(String[]args) {
		int[] a = {3, 8,2,3, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15};
		int[] s = new Solution(a).get();
		System.out.print("Solution: ");
		print(s);
		
	}
	
	static <T> void print(LinkedList<T> o) {
		Iterator<T> i = o.iterator();
		print(i);
	}
	
	static <T>void print(Iterator<T> i) {
		System.out.print("[ " + i.next());
		while (i.hasNext())
			System.out.print(", " + i.next());
		System.out.print(" ]\n");
	}
	
	static void print(int[] o) {
		System.out.print("[ " + o[0]);
		for (int i = 1;i<o.length;++i)
			System.out.print(", " + o[i]);
		System.out.print(" ]\n");
	}
	
}
